# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# libevent
if CONFIG['OS_TARGET'] != 'WINNT' and not CONFIG['MOZ_SYSTEM_LIBEVENT']:
    LOCAL_INCLUDES += [
        '/ipc/chromium/src/third_party/libevent',
    ]
    include('/ipc/chromium/src/third_party/libeventcommon.mozbuild')
    USE_LIBS += [
        'event',
    ]

LOCAL_INCLUDES += [
    '..',
    '../third_party/pdfium/skia/config',
]

include('../mortar.mozbuild')

# base_implementation
DEFINES['BASE_IMPLEMENTATION'] = True

SOURCES += [
    # net
    '../net/base/escape.cc',
    '../net/http/http_util.cc',

    # printing
    '../printing/pdf_transform.cc',
    '../printing/units.cc',

    # ui
    '../ui/base/window_open_disposition.cc',

    # base
    'at_exit.cc',
    'base_switches.cc',
    'build_time.cc',
    'callback_internal.cc',
    'command_line.cc',
    'cpu.cc',
    'debug/activity_tracker.cc',
    'debug/alias.cc',
    'debug/debugger.cc',
    'debug/dump_without_crashing.cc',
    'debug/profiler.cc',
    'debug/stack_trace.cc',
    'debug/task_annotator.cc',
    'feature_list.cc',
    'files/file.cc',
    'files/file_enumerator.cc',
    'files/file_path.cc',
    'files/file_path_constants.cc',
    'files/file_tracing.cc',
    'files/file_util.cc',
    'files/important_file_writer.cc',
    'files/memory_mapped_file.cc',
    'files/scoped_file.cc',
    'hash.cc',
    'json/json_parser.cc',
    'json/json_reader.cc',
    'json/json_string_value_serializer.cc',
    'json/json_writer.cc',
    'json/string_escape.cc',
    'lazy_instance.cc',
    'location.cc',
    'logging.cc',
    'md5.cc',
    'memory/ref_counted.cc',
    'memory/ref_counted_memory.cc',
    'memory/singleton.cc',
    'memory/weak_ptr.cc',
    'message_loop/incoming_task_queue.cc',
    'message_loop/message_loop.cc',
    'message_loop/message_loop_task_runner.cc',
    'message_loop/message_pump.cc',
    'message_loop/message_pump_default.cc',
    'metrics/bucket_ranges.cc',
    'metrics/field_trial.cc',
    'metrics/field_trial_param_associator.cc',
    'metrics/histogram.cc',
    'metrics/histogram_base.cc',
    'metrics/histogram_samples.cc',
    'metrics/metrics_hashes.cc',
    'metrics/persistent_histogram_allocator.cc',
    'metrics/persistent_memory_allocator.cc',
    'metrics/persistent_sample_map.cc',
    'metrics/sample_map.cc',
    'metrics/sample_vector.cc',
    'metrics/sparse_histogram.cc',
    'metrics/statistics_recorder.cc',
    'pending_task.cc',
    'pickle.cc',
    'process/memory_stubs.cc',
    'process/process_handle.cc',
    'profiler/tracked_time.cc',
    'rand_util.cc',
    'run_loop.cc',
    'sequence_token.cc',
    'sequenced_task_runner.cc',
    'sha1.cc',
    'strings/pattern.cc',
    'strings/string_number_conversions.cc',
    'strings/string_piece.cc',
    'strings/string_split.cc',
    'strings/string_util.cc',
    'strings/string_util_constants.cc',
    'strings/stringprintf.cc',
    'strings/utf_offset_string_conversions.cc',
    'strings/utf_string_conversion_utils.cc',
    'strings/utf_string_conversions.cc',
    'synchronization/atomic_flag.cc',
    'task_runner.cc',
    'task_scheduler/delayed_task_manager.cc',
    'task_scheduler/post_task.cc',
    'task_scheduler/priority_queue.cc',
    'task_scheduler/scheduler_worker.cc',
    'task_scheduler/scheduler_worker_pool_impl.cc',
    'task_scheduler/scheduler_worker_pool_params.cc',
    'task_scheduler/scheduler_worker_stack.cc',
    'task_scheduler/scoped_set_task_priority_for_current_thread.cc',
    'task_scheduler/sequence.cc',
    'task_scheduler/sequence_sort_key.cc',
    'task_scheduler/task.cc',
    'task_scheduler/task_scheduler.cc',
    'task_scheduler/task_scheduler_impl.cc',
    'task_scheduler/task_tracker.cc',
    'task_scheduler/task_traits.cc',
    'third_party/dmg_fp/dtoa.cc',
    'third_party/dmg_fp/g_fmt.cc',
    'third_party/dynamic_annotations/dynamic_annotations.c',
    'third_party/icu/icu_utf.cc',
    'third_party/nspr/prtime.cc',
    'third_party/superfasthash/superfasthash.c',
    'threading/post_task_and_reply_impl.cc',
    'threading/sequenced_task_runner_handle.cc',
    'threading/sequenced_worker_pool.cc',
    'threading/simple_thread.cc',
    'threading/thread.cc',
    'threading/thread_id_name_manager.cc',
    'threading/thread_local_storage.cc',
    'threading/thread_task_runner_handle.cc',
    'time/time.cc',
    'timer/timer.cc',
    'trace_event/category_registry.cc',
    'trace_event/event_name_filter.cc',
    'trace_event/heap_profiler_allocation_context.cc',
    'trace_event/heap_profiler_allocation_context_tracker.cc',
    'trace_event/heap_profiler_allocation_register.cc',
    'trace_event/heap_profiler_event_filter.cc',
    'trace_event/heap_profiler_heap_dump_writer.cc',
    'trace_event/heap_profiler_stack_frame_deduplicator.cc',
    'trace_event/heap_profiler_type_name_deduplicator.cc',
    'trace_event/malloc_dump_provider.cc',
    'trace_event/memory_allocator_dump.cc',
    'trace_event/memory_allocator_dump_guid.cc',
    'trace_event/memory_dump_manager.cc',
    'trace_event/memory_dump_request_args.cc',
    'trace_event/memory_dump_session_state.cc',
    'trace_event/memory_infra_background_whitelist.cc',
    'trace_event/process_memory_dump.cc',
    'trace_event/process_memory_maps.cc',
    'trace_event/process_memory_totals.cc',
    'trace_event/trace_buffer.cc',
    'trace_event/trace_config.cc',
    'trace_event/trace_event_argument.cc',
    'trace_event/trace_event_filter.cc',
    'trace_event/trace_event_impl.cc',
    'trace_event/trace_event_memory_overhead.cc',
    'trace_event/trace_event_synthetic_delay.cc',
    'trace_event/trace_log.cc',
    'trace_event/trace_log_constants.cc',
    'tracked_objects.cc',
    'tracking_info.cc',
    'values.cc',
    'vlog.cc',
]

if CONFIG['OS_TARGET'] == 'WINNT':
    SOURCES += [
        'debug/debugger_win.cc',
        'debug/stack_trace_win.cc',
        'file_version_info_win.cc',
        'files/file_enumerator_win.cc',
        'files/file_util_win.cc',
        'files/file_win.cc',
        'files/memory_mapped_file_win.cc',
        'memory/shared_memory_handle_win.cc',
        'memory/shared_memory_win.cc',
        'message_loop/message_pump_win.cc',
        'process/process_handle_win.cc',
        'process/process_metrics_win.cc',
        'process/process_win.cc',
        'rand_util_win.cc',
        'synchronization/condition_variable_win.cc',
        'synchronization/lock_impl_win.cc',
        'synchronization/read_write_lock_win.cc',
        'synchronization/waitable_event_win.cc',
        'sys_info_win.cc',
        'threading/platform_thread_win.cc',
        'threading/thread_local_storage_win.cc',
        'threading/worker_pool_win.cc',
        'time/time_win.cc',
        'trace_event/heap_profiler_allocation_register_win.cc',
        'trace_event/trace_event_etw_export_win.cc',
        'win/message_window.cc',
        'win/object_watcher.cc',
        'win/pe_image.cc',
        'win/registry.cc',
        'win/resource_util.cc',
        'win/scoped_handle.cc',
        'win/windows_version.cc',
        'win/wrapped_window_proc.cc',
    ]

if CONFIG['OS_TARGET'] != 'WINNT':
    SOURCES += [
        'memory/shared_memory_helper.cc',
        'strings/string16.cc',
    ]

if CONFIG['OS_TARGET'] == 'Linux':
    SOURCES += [
        'debug/debugger_posix.cc',
        'debug/stack_trace_posix.cc',
        'files/file_descriptor_watcher_posix.cc',
        'files/file_enumerator_posix.cc',
        'files/file_posix.cc',
        'files/file_util_posix.cc',
        'files/memory_mapped_file_posix.cc',
        'memory/shared_memory_posix.cc',
        'message_loop/message_pump_libevent.cc',
        'posix/global_descriptors.cc',
        'posix/safe_strerror.cc',
        'process/internal_linux.cc',
        'process/process_handle_linux.cc',
        'process/process_handle_posix.cc',
        'process/process_metrics_posix.cc',
        'process/process_posix.cc',
        'rand_util_posix.cc',
        'strings/sys_string_conversions_posix.cc',
        'synchronization/condition_variable_posix.cc',
        'synchronization/lock_impl_posix.cc',
        'synchronization/read_write_lock_posix.cc',
        'synchronization/waitable_event_posix.cc',
        'sys_info_posix.cc',
        'task_scheduler/task_tracker_posix.cc',
        'threading/platform_thread_internal_posix.cc',
        'threading/platform_thread_linux.cc',
        'threading/platform_thread_posix.cc',
        'threading/thread_local_storage_posix.cc',
        'threading/worker_pool_posix.cc',
        'time/time_posix.cc',
        'trace_event/heap_profiler_allocation_register_posix.cc',
    ]

if CONFIG['OS_TARGET'] == 'Darwin':
    SOURCES += [
        'time/time_mac.cc',
    ]

# mortar workaround
if CONFIG['OS_TARGET'] == 'WINNT':
    SOURCES['third_party/dmg_fp/dtoa.cc'].flags += [ '-FIlimits.h' ]
else:
    SOURCES['third_party/dmg_fp/dtoa.cc'].flags += [ '-include limits.h' ]

# default_libs
if CONFIG['OS_TARGET'] == 'WINNT':
    OS_LIBS += [
        'dbghelp',
        'ole32',
        'psapi',
        'shell32',
        'version',
    ]
elif CONFIG['OS_TARGET'] == 'Linux':
    OS_LIBS += [
        'rt',
    ]

Library('mortar_base')
